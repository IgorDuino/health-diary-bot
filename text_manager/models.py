from django.db import models


class MetaClass(type):
    def __new__(cls, name, bases, attrs):
        for attr_name, attr_value in attrs.items():
            if not attr_name.startswith("__"):
                attrs[attr_name] = AttributeDescriptor(attr_name, attr_value)
        return super().__new__(cls, name, bases, attrs)


class MetaClassButton(type):
    def __new__(cls, name, bases, attrs):
        for attr_name, attr_value in attrs.items():
            if not attr_name.startswith("__"):
                attrs[attr_name] = AttributeDescriptorButton(attr_name, attr_value)
        return super().__new__(cls, name, bases, attrs)


class AttributeDescriptor:
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def __get__(self, instance, owner):
        if instance is None:
            return self.value

        if Text.objects.filter(title=self.name).exists():
            return Text.objects.get(title=self.name).text
        else:
            new_text = Text(title=self.name, text=self.value)
            new_text.save()
            return new_text.text


class AttributeDescriptorButton:
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def __get__(self, instance, owner):
        if instance is None:
            return self.value

        if ButtonText.objects.filter(title=self.name).exists():
            return ButtonText.objects.get(title=self.name).text
        else:
            new_text = ButtonText(title=self.name, text=self.value)
            new_text.save()
            return new_text.text


class ButtonTexts(metaclass=MetaClassButton):
    home = "–ì–ª–∞–≤–Ω–∞—è"
    statistics = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    addtionals = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"

    previous_day = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å"
    next_day = "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"
    specify_date = "–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É"
    current_day = "–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å"


class Texts(metaclass=MetaClass):
    start_first_time = "üòÉ–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ—ë–º –ø–∏—Ç–∞–Ω–∏–∏.\n\n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã, –ª–∏–±–æ —É–∫–∞–∑–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –ë–ñ–£.\n\n–í–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã X –ë–µ–ª–æ–∫ Y –ñ–∏—Ä—ã Z –£–≥–ª–µ–≤–æ–¥—ã A"
    today_stat = "<b>–¢–≤–æ—è –∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>üëá\n–ö–∞–ª–æ—Ä–∏–∏: {calories} \n–ë–µ–ª–æ–∫: {protein}\n–ñ–∏—Ä—ã: {fats}\n–£–≥–ª–µ–≤–æ–¥—ã: {carbohydrates}"
    user_error_message = "ü§î –ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    disabled_for_new_users = "ü§î –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    statistics = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ <b>{date}</b>:\n\n{products}\n\n<b>–û–±—â–∏–π –∏—Ç–æ–≥:</b>\n–ö–∞–ª–æ—Ä–∏–∏: {calories} \n–ë–µ–ª–æ–∫: {protein}\n–ñ–∏—Ä—ã: {fats}\n–£–≥–ª–µ–≤–æ–¥—ã: {carbohydrates}"
    specify_date = "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì</b>\n(–Ω–∞–ø—Ä–∏–º–µ—Ä 15.12.23)"
    

text_choices = [attr for attr in dir(Texts) if not attr.startswith("__")]
button_text_choices = [attr for attr in dir(ButtonTexts) if not attr.startswith("__")]


texts = Texts()
button_texts = ButtonTexts()


class Text(models.Model):
    class Meta:
        db_table = "text_table"

    title = models.CharField(
        max_length=255,
        choices=[(choice, choice) for choice in text_choices],
        unique=True,
        null=False,
        blank=False,
    )

    text = models.TextField(
        max_length=5000,
        null=False,
        blank=False,
    )


class ButtonText(models.Model):
    class Meta:
        db_table = "button_text_table"

    title = models.CharField(
        max_length=255,
        choices=[(choice, choice) for choice in button_text_choices],
        unique=True,
        null=False,
        blank=False,
    )

    text = models.TextField(
        max_length=5000,
        null=False,
        blank=False,
    )
